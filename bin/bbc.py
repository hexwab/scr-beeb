import math

##########################################################################
##########################################################################

gamma=2.2

##########################################################################
##########################################################################

rgbs=[(255 if (i&1)!=0 else 0,
       255 if (i&2)!=0 else 0,
       255 if (i&4)!=0 else 0) for i in range(8)]

##########################################################################
##########################################################################

def find_closest_rgb(p):
    assert p[0]>=0 and p[0]<=255
    assert p[1]>=0 and p[1]<=255
    assert p[2]>=0 and p[2]<=255
    
    p=[int(math.pow(p[0]/255.0,gamma)*255),
       int(math.pow(p[1]/255.0,gamma)*255),
       int(math.pow(p[2]/255.0,gamma)*255)]

    best=None
    best_dist_sq=None
    
    for rgb in rgbs:
        dr=p[0]-rgb[0]
        dg=p[1]-rgb[1]
        db=p[2]-rgb[2]
        dist_sq=dr*dr+dg*dg+db*db

        if best_dist_sq is None or dist_sq<best_dist_sq:
            best_dist_sq=dist_sq
            best=rgb

    return best

##########################################################################
##########################################################################

def pack_4bpp(pixels):
    assert len(pixels)==2,pixels
    for i in range(2): assert pixels[i]>=0 and pixels[i]<=15

    return ((pixels[0]>>3&1)<<7|
            (pixels[1]>>3&1)<<6|
            (pixels[0]>>2&1)<<5|
            (pixels[1]>>2&1)<<4|
            (pixels[0]>>1&1)<<3|
            (pixels[1]>>1&1)<<2|
            (pixels[0]>>0&1)<<1|
            (pixels[1]>>0&1)<<1)

##########################################################################
##########################################################################

def pack_2bpp(pixels):
    assert len(pixels)==4,pixels
    for i in range(4): assert pixels[i]>=0 and pixels[i]<=3

    return ((pixels[0]>>1&1)<<7|
            (pixels[1]>>1&1)<<6|
            (pixels[2]>>1&1)<<5|
            (pixels[3]>>1&1)<<4|
            (pixels[0]>>0&1)<<3|
            (pixels[1]>>0&1)<<2|
            (pixels[2]>>0&1)<<1|
            (pixels[3]>>0&1)<<0)

##########################################################################
##########################################################################

def pack_1bpp(pixels):
    assert len(pixels)==8,pixels
    for i in range(8): assert pixels[i]==0 or pixels[i]==1

    return (pixels[0]<<7|
            pixels[1]<<6|
            pixels[2]<<5|
            pixels[3]<<4|
            pixels[4]<<3|
            pixels[5]<<2|
            pixels[6]<<1|
            pixels[7]<<0)

##########################################################################
##########################################################################
